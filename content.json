[{"title":"dialog从底部弹出来","date":"2017-01-04T07:39:36.904Z","path":"2017/01/04/android/diolog从底部弹出/","text":"先自定义dialog，在oncreat方法中加上如下代码 @Override protected void onCreate(Bundle bundle) { super.onCreate(bundle); getWindow().setGravity(Gravity.BOTTOM); //显示在底部 WindowManager m = getWindow().getWindowManager(); Display d = m.getDefaultDisplay(); WindowManager.LayoutParams p = getWindow().getAttributes(); p.width = d.getWidth(); //设置dialog的宽度为当前手机屏幕的宽度 p.height = (int) (d.getHeight() / 2.7);//设置当前dialog的高度是屏幕的一半 getWindow().setWindowAnimations(R.style.dialogstyle); // 添加动画 getWindow().setAttributes(p); } - 动画 ` &lt;style name=&quot;dialogstyle&quot; parent=&quot;android:Animation&quot;&gt; &lt;item name=&quot;@android:windowEnterAnimation&quot;&gt;@anim/dialog_enter&lt;/item&gt; &lt;item name=&quot;@android:windowExitAnimation&quot;&gt;@anim/dialog_exit&lt;/item&gt; &lt;/style&gt; ` - 在res下面创建anim文件夹 ` &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;translate android:duration=&quot;400&quot; android:fromYDelta=&quot;100%p&quot; /&gt; &lt;/set&gt;` enter ` &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;translate android:duration=&quot;400&quot; android:toYDelta=&quot;100%p&quot; /&gt; &lt;/set&gt;` exit 一开始我以为就这么简单的事情，结果一显示就傻了，还有不贴边我就百度查啊查的，终于找到解决办法 在构造方法中给dialog加上自己的stylepublic BottomScrollDialog(Context context) { super(context, R.style.my_dialog); requestWindowFeature(Window.FEATURE_NO_TITLE); super.setContentView(view); } style代码&lt;style name=&quot;my_dialog&quot;&gt; &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt; &lt;item name=&quot;android:backgroundDimEnabled&quot;&gt;true&lt;/item&gt; &lt;/style&gt;","tags":[{"name":"android","slug":"android","permalink":"http://sidongyu.com/tags/android/"}]},{"title":"calendar判断 long时间是否是本周","date":"2017-01-03T06:26:22.343Z","path":"2017/01/03/android/时间工具类判断是否是本周/","text":"工具类 直接上代码 别人的代码上面做了一些小改动。适合自己的项目吧 public class DateUtils { /** * 判断所给时间是否是本周 */ public static boolean isThisWeek(long time) { Calendar calendar = Calendar.getInstance(); int currentWeek = calendar.get(Calendar.WEEK_OF_YEAR); int currentDay_of_Year = calendar.get(Calendar.DAY_OF_YEAR); calendar.setTime(new Date(time)); int paramWeek = calendar.get(Calendar.WEEK_OF_YEAR); int paramDay_of_Week = calendar.get(Calendar.DAY_OF_WEEK); int paramDay_of_Year = calendar.get(Calendar.DAY_OF_YEAR); if (paramWeek == currentWeek) { if (paramDay_of_Week == 1) {//如果是周日 return false; } return true; } if (currentWeek-paramWeek =1 &amp;&amp; paramDay_of_Week == 1) { return true; } // 中国一周的开始是星期一 外国一周的开始是星期二，所以代码是外国人写的 return false; } //判断选择的日期是否是今天 public static boolean isToday(long time) { return isThisTime(time,&quot;yyyy-MM-dd&quot;); } //判断选择的日期是否是本月 public static boolean isThisMonth(long time) { return isThisTime(time,&quot;yyyy-MM&quot;); } private static boolean isThisTime(long time,String pattern) { Date date = new Date(time); SimpleDateFormat sdf = new SimpleDateFormat(pattern); String param = sdf.format(date);//参数时间 String now = sdf.format(new Date());//当前时间 if(param.equals(now)){ return true; } return false; } }","tags":[{"name":"android","slug":"android","permalink":"http://sidongyu.com/tags/android/"}]},{"title":"greenDao使用","date":"2017-01-02T16:00:00.000Z","path":"2017/01/03/android/greendao使用/","text":"greenDao网上关于greendao一大堆，什么内存好呀，什么速度快啊。。。感觉都是原文翻译，我是感觉没有想象中的那样困难 - 第一步 配置project曾的build.gradlebuildscript { repositories { jcenter() } dependencies { classpath &apos;com.android.tools.build:gradle:2.2.1&apos; classpath &apos;org.greenrobot:greendao-gradle-plugin:3.1.0&apos; classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.8&apos; // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files } } allprojects { repositories { jcenter() } } task clean(type: Delete) { delete rootProject.buildDir } 第二步 配置自己项目 apply plugin: &apos;com.android.application&apos; apply plugin: &apos;org.greenrobot.greendao&apos; //这个要有 使用插件的，会自动生成管理类 android { compileSdkVersion 25 buildToolsVersion &quot;25.0.0&quot; defaultConfig { applicationId &quot;com.snailf.ga.saccountbook&quot; minSdkVersion 15 targetSdkVersion 25 versionCode 1 versionName &quot;1.0&quot; testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot; } buildTypes { release { minifyEnabled false proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos; } } greendao { schemaVersion 4 //数据库版本 targetGenDir &apos;src/main/java&apos;// DaoMaster DaoSession Dao文件创建的地方 最好放在/main/java下，会报找不到文件错误 } repositories { flatDir { dirs &apos;libs&apos; } } } dependencies { compile fileTree(include: [&apos;*.jar&apos;], dir: &apos;libs&apos;) compile &apos;com.alibaba:fastjson:1.2.11&apos; compile &apos;com.android.support:appcompat-v7:25.0.0&apos; compile &apos;org.greenrobot:greendao:3.1.0&apos; //添加依赖greendao compile &apos;com.jakewharton:butterknife:7.0.0&apos; compile &apos;com.android.support:design:25.0.0&apos; compile &apos;com.android.support:support-v4:25.0.0&apos; compile(name: &apos;WheelPicker&apos;, ext: &apos;aar&apos;) } 第三步 编写bean类 @Entity //生成session和dao的标识 ，没有他就不会生成 public class AccountInfo { @Id(autoincrement = true)//主键 自动增长 private Long id; //剩下的都是一些 平平常常的字段 @Property(nameInDb = &quot;ACCOUNTTYPE&quot;) private String accountType; @Property(nameInDb = &quot;AMOUNT&quot;) private long amount; @Property(nameInDb = &quot;TYPE&quot;) private int type; @Property(nameInDb = &quot;DATE&quot;) private long date; @Property(nameInDb = &quot;REMARK&quot;) private String remark; @ToOne(joinProperty = &quot;id&quot;)//一对一 根据id查询另外一个数据库 private BaseType baseType; } 第四步 rebuild project，这下你就可以看到生成session和 dao了 rebuild之后会生成构造方法和setter 俺的 getter方法。如果想要修改字段的类型，或者增加字段，那么就把生成的那些东西，都删了，然后 加上自己想加的，改了自己想改的，重新rebuild，但是这样之前保存的数据就没了。。。 第五步 创建数据库manager public class DateBaseDaoManager { private final static String dbName = &quot;account_db&quot;; private static DateBaseDaoManager mInstance; private DaoMaster.DevOpenHelper openHelper; private Context context; public DateBaseDaoManager(Context context) { this.context = context; openHelper = new DaoMaster.DevOpenHelper(context, dbName, null); } /** * 获取单例引用 * * @param context * @return */ public static DateBaseDaoManager getInstance(Context context) { if (mInstance == null) { synchronized (DateBaseDaoManager.class) { if (mInstance == null) { mInstance = new DateBaseDaoManager(context); } } } return mInstance; } /** * 获取可读数据库 */ private SQLiteDatabase getReadableDatabase() { if (openHelper == null) { openHelper = new DaoMaster.DevOpenHelper(context, dbName, null); } SQLiteDatabase db = openHelper.getReadableDatabase(); return db; } /** * 获取可写数据库 */ private SQLiteDatabase getWritableDatabase() { if (openHelper == null) { openHelper = new DaoMaster.DevOpenHelper(context, dbName, null); } SQLiteDatabase db = openHelper.getWritableDatabase(); return db; } /========================================收入类型增删改查======================= /** * 插入一条 type */ public long insertType(BaseType baseType){ return getTypeDao().insert(baseType); } /** * 插入或者修改一条 type */ public long insertOrUpdateType(BaseType baseType){ return getTypeDao().insertOrReplace(baseType); } /** * 删除一条 type */ public void delType(BaseType baseType){ getTypeDao().delete(baseType); } /** * 查询所有的 type */ public List&lt;BaseType&gt; queryTypeList(){ return getTypeDao().queryBuilder().list(); } //================================收支信息的增删改查============================ /** * 查询 账单 通过id */ public AccountInfo queryOrderById(long id) { if (!TextUtils.isEmpty(id + &quot;&quot;)) { return getOrderDao().load(id); } return null; } /** * 插入或者修改一条 收支信息 */ public long insertOrUpdateOrder(AccountInfo accountInfo){ return getOrderDao().insertOrReplace(accountInfo); } /** * 插入 收支信息 */ public long insertOrder(AccountInfo accountInfo){ return getOrderDao().insert(accountInfo); } /** * 删除一条 收支信息 */ public void delOrder(AccountInfo accountInfo){ getOrderDao().delete(accountInfo); } /** * 查询所有的 收支信息 */ public List&lt;AccountInfo&gt; queryOrderList(){ return getOrderDao().queryBuilder().list(); } //====================================获取数据操作的dao===================================== /** * 收支信息的dao */ public BaseTypeDao getTypeDao() { DaoMaster daoMaster = new DaoMaster(getWritableDatabase()); DaoSession daoSession = daoMaster.newSession(); return daoSession.getBaseTypeDao(); } /** * 收支信息的dao */ public AccountInfoDao getOrderDao() { DaoMaster daoMaster = new DaoMaster(getWritableDatabase()); DaoSession daoSession = daoMaster.newSession(); return daoSession.getAccountInfoDao(); } } ====================greendao3.0 不像之前那样配置麻烦了，之前还有那样，还要这样的，看着就烦人，就一代而过了================","tags":[{"name":"android","slug":"android","permalink":"http://sidongyu.com/tags/android/"}]},{"title":"强大的SpannableString","date":"2016-12-20T16:00:00.000Z","path":"2016/12/21/android/SpannableStringBuilder/","text":"SpannableString中最重要的方法就是 setSapan()方法了，有一个参数what是这个方法的精髓。what： BackgroundColorSpan : 文本背景色 ForegroundColorSpan : 文本颜色 MaskFilterSpan : 修饰效果，如模糊(BlurMaskFilter)浮雕 RasterizerSpan : 光栅效果 StrikethroughSpan : 删除线 SuggestionSpan : 相当于占位符 UnderlineSpan : 下划线 AbsoluteSizeSpan : 文本字体（绝对大小） DynamicDrawableSpan : 设置图片，基于文本基线或底部对齐。 ImageSpan : 图片 RelativeSizeSpan : 相对大小（文本字体） ScaleXSpan : 基于x轴缩放 StyleSpan : 字体样式：粗体、斜体等 SubscriptSpan : 下标（数学公式会用到） SuperscriptSpan : 上标（数学公式会用到） TextAppearanceSpan : 文本外貌（包括字体、大小、样式和颜色） TypefaceSpan : 文本字体 URLSpan : 文本超链接 ClickableSpan : 点击事件 TextAppearanceSpan(String family, int style, int size, ColorStateList color, ColorStateList linkColor) family: monospace serif 一般都选这个 sans-serif style: Typeface.NORMAL 正常 Typeface.BOLD 加粗 Typeface.ITALIC 斜体 Typeface.BOLD_ITALIC 加粗斜体 size 文字大小 color 字体颜色selector context.getColorStateList(R.color....) M以上的 ColorState.createFromXml(context.getResources(),context.getResources().getXml(R.color.selector_apperarance_span) linkColor","tags":[{"name":"android","slug":"android","permalink":"http://sidongyu.com/tags/android/"}]},{"title":"司雨烂片---昙花花蕊","date":"2016-12-12T16:00:00.000Z","path":"2016/12/13/photo/tflowercenter/","text":"","tags":[{"name":"照片","slug":"照片","permalink":"http://sidongyu.com/tags/照片/"}]},{"title":"司雨烂片---蚂蚱","date":"2016-12-12T16:00:00.000Z","path":"2016/12/13/photo/mazha/","text":"","tags":[{"name":"照片","slug":"照片","permalink":"http://sidongyu.com/tags/照片/"}]},{"title":"司雨烂片---昙花绽放","date":"2016-12-12T16:00:00.000Z","path":"2016/12/13/photo/tflower_1/","text":"","tags":[{"name":"照片","slug":"照片","permalink":"http://sidongyu.com/tags/照片/"}]}]